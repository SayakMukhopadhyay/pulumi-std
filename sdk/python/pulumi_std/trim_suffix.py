# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'TrimSuffixResult',
    'AwaitableTrimSuffixResult',
    'trim_suffix',
    'trim_suffix_output',
]

@pulumi.output_type
class TrimSuffixResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> str:
        return pulumi.get(self, "result")


class AwaitableTrimSuffixResult(TrimSuffixResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return TrimSuffixResult(
            result=self.result)


def trim_suffix(input: Optional[str] = None,
                suffix: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableTrimSuffixResult:
    """
    Removes the specified suffix from the end of the given string, if present.
    """
    __args__ = dict()
    __args__['input'] = input
    __args__['suffix'] = suffix
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('std:index:trimSuffix', __args__, opts=opts, typ=TrimSuffixResult).value

    return AwaitableTrimSuffixResult(
        result=__ret__.result)


@_utilities.lift_output_func(trim_suffix)
def trim_suffix_output(input: Optional[pulumi.Input[str]] = None,
                       suffix: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[TrimSuffixResult]:
    """
    Removes the specified suffix from the end of the given string, if present.
    """
    ...
