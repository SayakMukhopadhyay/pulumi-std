// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Length
    {
        /// <summary>
        /// Returns a JSON-encoded representation of the given value, which can contain arbitrarily-nested lists and maps. Note that if the value is a string then its value will be placed in quotes.
        /// </summary>
        public static Task<LengthResult> InvokeAsync(LengthArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<LengthResult>("std:index:length", args ?? new LengthArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a JSON-encoded representation of the given value, which can contain arbitrarily-nested lists and maps. Note that if the value is a string then its value will be placed in quotes.
        /// </summary>
        public static Output<LengthResult> Invoke(LengthInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<LengthResult>("std:index:length", args ?? new LengthInvokeArgs(), options.WithDefaults());
    }


    public sealed class LengthArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public object Input { get; set; } = null!;

        public LengthArgs()
        {
        }
        public static new LengthArgs Empty => new LengthArgs();
    }

    public sealed class LengthInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public Input<object> Input { get; set; } = null!;

        public LengthInvokeArgs()
        {
        }
        public static new LengthInvokeArgs Empty => new LengthInvokeArgs();
    }


    [OutputType]
    public sealed class LengthResult
    {
        public readonly int Result;

        [OutputConstructor]
        private LengthResult(int result)
        {
            Result = result;
        }
    }
}
