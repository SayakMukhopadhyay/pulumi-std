// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Produces a list by dividing a given string at all occurrences of a given separator
 */
export function split(args: SplitArgs, opts?: pulumi.InvokeOptions): Promise<SplitResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("std:index:split", {
        "separator": args.separator,
        "text": args.text,
    }, opts);
}

export interface SplitArgs {
    separator: string;
    text: string;
}

export interface SplitResult {
    readonly result: string[];
}

export function splitOutput(args: SplitOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<SplitResult> {
    return pulumi.output(args).apply(a => split(a, opts))
}

export interface SplitOutputArgs {
    separator: pulumi.Input<string>;
    text: pulumi.Input<string>;
}
