// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Splits a single list into multiple lists where each has at most the given number of elements.
 */
export function chunklist(args: ChunklistArgs, opts?: pulumi.InvokeOptions): Promise<ChunklistResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("std:index:chunklist", {
        "input": args.input,
        "size": args.size,
    }, opts);
}

export interface ChunklistArgs {
    input: any[];
    size: number;
}

export interface ChunklistResult {
    readonly result: any[];
}

export function chunklistOutput(args: ChunklistOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ChunklistResult> {
    return pulumi.output(args).apply(a => chunklist(a, opts))
}

export interface ChunklistOutputArgs {
    input: pulumi.Input<any[]>;
    size: pulumi.Input<number>;
}
