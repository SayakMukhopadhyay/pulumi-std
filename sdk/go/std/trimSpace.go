// Code generated by pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Removes any space characters from the start and end of the given string,
//
//	following the Unicode definition of \"space\" (i.e. spaces, tabs, newline, etc.).
func TrimSpace(ctx *pulumi.Context, args *TrimSpaceArgs, opts ...pulumi.InvokeOption) (*TrimSpaceResult, error) {
	var rv TrimSpaceResult
	err := ctx.Invoke("std:index:trimSpace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TrimSpaceArgs struct {
	Input string `pulumi:"input"`
}

type TrimSpaceResult struct {
	Result string `pulumi:"result"`
}

func TrimSpaceOutput(ctx *pulumi.Context, args TrimSpaceOutputArgs, opts ...pulumi.InvokeOption) TrimSpaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (TrimSpaceResult, error) {
			args := v.(TrimSpaceArgs)
			r, err := TrimSpace(ctx, &args, opts...)
			var s TrimSpaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(TrimSpaceResultOutput)
}

type TrimSpaceOutputArgs struct {
	Input pulumi.StringInput `pulumi:"input"`
}

func (TrimSpaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrimSpaceArgs)(nil)).Elem()
}

type TrimSpaceResultOutput struct{ *pulumi.OutputState }

func (TrimSpaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrimSpaceResult)(nil)).Elem()
}

func (o TrimSpaceResultOutput) ToTrimSpaceResultOutput() TrimSpaceResultOutput {
	return o
}

func (o TrimSpaceResultOutput) ToTrimSpaceResultOutputWithContext(ctx context.Context) TrimSpaceResultOutput {
	return o
}

func (o TrimSpaceResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v TrimSpaceResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(TrimSpaceResultOutput{})
}
