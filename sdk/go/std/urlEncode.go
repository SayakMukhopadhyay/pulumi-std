// Code generated by pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Applies URL encoding to a given string.
func UrlEncode(ctx *pulumi.Context, args *UrlEncodeArgs, opts ...pulumi.InvokeOption) (*UrlEncodeResult, error) {
	var rv UrlEncodeResult
	err := ctx.Invoke("std:index:urlEncode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type UrlEncodeArgs struct {
	Input string `pulumi:"input"`
}

type UrlEncodeResult struct {
	Result string `pulumi:"result"`
}

func UrlEncodeOutput(ctx *pulumi.Context, args UrlEncodeOutputArgs, opts ...pulumi.InvokeOption) UrlEncodeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (UrlEncodeResult, error) {
			args := v.(UrlEncodeArgs)
			r, err := UrlEncode(ctx, &args, opts...)
			var s UrlEncodeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(UrlEncodeResultOutput)
}

type UrlEncodeOutputArgs struct {
	Input pulumi.StringInput `pulumi:"input"`
}

func (UrlEncodeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlEncodeArgs)(nil)).Elem()
}

type UrlEncodeResultOutput struct{ *pulumi.OutputState }

func (UrlEncodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlEncodeResult)(nil)).Elem()
}

func (o UrlEncodeResultOutput) ToUrlEncodeResultOutput() UrlEncodeResultOutput {
	return o
}

func (o UrlEncodeResultOutput) ToUrlEncodeResultOutputWithContext(ctx context.Context) UrlEncodeResultOutput {
	return o
}

func (o UrlEncodeResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v UrlEncodeResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(UrlEncodeResultOutput{})
}
